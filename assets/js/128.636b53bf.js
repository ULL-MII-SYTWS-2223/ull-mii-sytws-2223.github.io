(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{767:function(e,t,s){"use strict";s.r(t);var a=s(9),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"gh-reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-reference"}},[e._v("#")]),e._v(" gh reference")]),e._v(" "),s("h2",{attrs:{id:"gh-alias-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-alias-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh alias <command>")])]),e._v(" "),s("p",[e._v("Create command shortcuts")]),e._v(" "),s("h3",{attrs:{id:"gh-alias-delete-alias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-alias-delete-alias"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh alias delete <alias>")])]),e._v(" "),s("p",[e._v("Delete an alias")]),e._v(" "),s("h3",{attrs:{id:"gh-alias-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-alias-list"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh alias list")])]),e._v(" "),s("p",[e._v("List your aliases")]),e._v(" "),s("h3",{attrs:{id:"gh-alias-set-alias-expansion-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-alias-set-alias-expansion-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh alias set <alias> <expansion> [flags]")])]),e._v(" "),s("p",[e._v("Create a shortcut for a gh command")]),e._v(" "),s("ul",[s("li",[e._v("-s, --shell   Declare an alias to be passed through a shell interpreter")])]),e._v(" "),s("h2",{attrs:{id:"gh-api-endpoint-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-api-endpoint-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh api <endpoint> [flags]")])]),e._v(" "),s("p",[e._v("Make an authenticated GitHub API request")]),e._v(" "),s("ul",[s("li",[e._v('--cache duration        Cache the response, e.g. "3600s", "60m", "1h"')]),e._v(" "),s("li",[e._v("-F, --field key=value       Add a typed parameter in key=value format")]),e._v(" "),s("li",[e._v("-H, --header key:value      Add a HTTP request header in key:value format")]),e._v(" "),s("li",[e._v('--hostname string       The GitHub hostname for the request (default "github.com")')]),e._v(" "),s("li",[e._v("-i, --include               Include HTTP response status line and headers in the output")]),e._v(" "),s("li",[e._v('--input file            The file to use as body for the HTTP request (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-q, --jq string             Query to select values from the response using jq syntax")]),e._v(" "),s("li",[e._v('-X, --method string         The HTTP method for the request (default "GET")')]),e._v(" "),s("li",[e._v("--paginate              Make additional HTTP requests to fetch all pages of results")]),e._v(" "),s("li",[e._v('-p, --preview names         GitHub API preview names to request (without the "-preview" suffix)')]),e._v(" "),s("li",[e._v("-f, --raw-field key=value   Add a string parameter in key=value format")]),e._v(" "),s("li",[e._v("--silent                Do not print the response body")]),e._v(" "),s("li",[e._v('-t, --template string       Format JSON output using a Go template; see "gh help formatting"')])]),e._v(" "),s("h2",{attrs:{id:"gh-auth-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-auth-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh auth <command>")])]),e._v(" "),s("p",[e._v("Authenticate gh and git with GitHub")]),e._v(" "),s("h3",{attrs:{id:"gh-auth-login-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-auth-login-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh auth login [flags]")])]),e._v(" "),s("p",[e._v("Authenticate with a GitHub host")]),e._v(" "),s("ul",[s("li",[e._v("-p, --git-protocol string   The protocol to use for git operations: {ssh|https}")]),e._v(" "),s("li",[e._v("-h, --hostname string       The hostname of the GitHub instance to authenticate with")]),e._v(" "),s("li",[e._v("-s, --scopes strings        Additional authentication scopes to request")]),e._v(" "),s("li",[e._v("-w, --web                   Open a browser to authenticate")]),e._v(" "),s("li",[e._v("--with-token            Read token from standard input")])]),e._v(" "),s("h3",{attrs:{id:"gh-auth-logout-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-auth-logout-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh auth logout [flags]")])]),e._v(" "),s("p",[e._v("Log out of a GitHub host")]),e._v(" "),s("ul",[s("li",[e._v("-h, --hostname string   The hostname of the GitHub instance to log out of")])]),e._v(" "),s("h3",{attrs:{id:"gh-auth-refresh-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-auth-refresh-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh auth refresh [flags]")])]),e._v(" "),s("p",[e._v("Refresh stored authentication credentials")]),e._v(" "),s("ul",[s("li",[e._v("-h, --hostname string   The GitHub host to use for authentication")]),e._v(" "),s("li",[e._v("-s, --scopes strings    Additional authentication scopes for gh to have")])]),e._v(" "),s("h3",{attrs:{id:"gh-auth-setup-git-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-auth-setup-git-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh auth setup-git [flags]")])]),e._v(" "),s("p",[e._v("Configure git to use GitHub CLI as a credential helper")]),e._v(" "),s("ul",[s("li",[e._v("-h, --hostname string   The hostname to configure git for")])]),e._v(" "),s("h3",{attrs:{id:"gh-auth-status-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-auth-status-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh auth status [flags]")])]),e._v(" "),s("p",[e._v("View authentication status")]),e._v(" "),s("ul",[s("li",[e._v("-h, --hostname string   Check a specific hostname's auth status")]),e._v(" "),s("li",[e._v("-t, --show-token        Display the auth token")])]),e._v(" "),s("h3",{attrs:{id:"gh-auth-token-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-auth-token-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh auth token [flags]")])]),e._v(" "),s("p",[e._v("Print the auth token gh is configured to use")]),e._v(" "),s("ul",[s("li",[e._v("-h, --hostname string   The hostname of the GitHub instance authenticated with")])]),e._v(" "),s("h2",{attrs:{id:"gh-browse-number-path-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-browse-number-path-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh browse [<number> | <path>] [flags]")])]),e._v(" "),s("p",[e._v("Open the repository in the browser")]),e._v(" "),s("ul",[s("li",[e._v("-b, --branch string   Select another branch by passing in the branch name")]),e._v(" "),s("li",[e._v("-c, --commit          Open the last commit")]),e._v(" "),s("li",[e._v("-n, --no-browser      Print destination URL instead of opening the browser")]),e._v(" "),s("li",[e._v("-p, --projects        Open repository projects")]),e._v(" "),s("li",[e._v("-s, --settings        Open repository settings")]),e._v(" "),s("li",[e._v("-w, --wiki            Open repository wiki")])]),e._v(" "),s("h2",{attrs:{id:"gh-codespace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace")])]),e._v(" "),s("p",[e._v("Connect to and manage codespaces")]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-code-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-code-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace code [flags]")])]),e._v(" "),s("p",[e._v("Open a codespace in Visual Studio Code")]),e._v(" "),s("ul",[s("li",[e._v("-c, --codespace string   Name of the codespace")]),e._v(" "),s("li",[e._v("--insiders           Use the insiders version of Visual Studio Code")]),e._v(" "),s("li",[e._v("-w, --web                Use the web version of Visual Studio Code")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-cp-e-r-scp-flags-sources-dest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-cp-e-r-scp-flags-sources-dest"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace cp [-e] [-r] [-- [<scp flags>...]] <sources>... <dest>")])]),e._v(" "),s("p",[e._v("Copy files between local and remote file systems")]),e._v(" "),s("ul",[s("li",[e._v("-c, --codespace string   Name of the codespace")]),e._v(" "),s("li",[e._v("-e, --expand             Expand remote file names on remote shell")]),e._v(" "),s("li",[e._v("-p, --profile string     Name of the SSH profile to use")]),e._v(" "),s("li",[e._v("-r, --recursive          Recursively copy directories")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-create-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-create-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace create [flags]")])]),e._v(" "),s("p",[e._v("Create a codespace")]),e._v(" "),s("ul",[s("li",[e._v("-b, --branch string               repository branch")]),e._v(" "),s("li",[e._v("--default-permissions         do not prompt to accept additional permissions requested by the codespace")]),e._v(" "),s("li",[e._v("--devcontainer-path string    path to the devcontainer.json file to use when creating codespace")]),e._v(" "),s("li",[e._v('--idle-timeout duration       allowed inactivity before codespace is stopped, e.g. "10m", "1h"')]),e._v(" "),s("li",[e._v("-l, --location string             location: {EastUs|SouthEastAsia|WestEurope|WestUs2} (determined automatically if not provided)")]),e._v(" "),s("li",[e._v("-m, --machine string              hardware specifications for the VM")]),e._v(" "),s("li",[e._v("-r, --repo string                 repository name with owner: user/repo")]),e._v(" "),s("li",[e._v('--retention-period duration   allowed time after shutting down before the codespace is automatically deleted (maximum 30 days), e.g. "1h", "72h"')]),e._v(" "),s("li",[e._v("-s, --status                      show status of post-create command and dotfiles")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-delete-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-delete-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace delete [flags]")])]),e._v(" "),s("p",[e._v("Delete codespaces")]),e._v(" "),s("ul",[s("li",[e._v("--all                Delete all codespaces")]),e._v(" "),s("li",[e._v("-c, --codespace string   Name of the codespace")]),e._v(" "),s("li",[e._v("--days N             Delete codespaces older than N days")]),e._v(" "),s("li",[e._v("-f, --force              Skip confirmation for codespaces that contain unsaved changes")]),e._v(" "),s("li",[e._v("-o, --org login          The login handle of the organization (admin-only)")]),e._v(" "),s("li",[e._v("-r, --repo repository    Delete codespaces for a repository")]),e._v(" "),s("li",[e._v("-u, --user username      The username to delete codespaces for (used with --org)")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-edit-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-edit-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace edit [flags]")])]),e._v(" "),s("p",[e._v("Edit a codespace")]),e._v(" "),s("ul",[s("li",[e._v("-c, --codespace string      Name of the codespace")]),e._v(" "),s("li",[e._v("-d, --display-name string   Set the display name")]),e._v(" "),s("li",[e._v("-m, --machine string        Set hardware specifications for the VM")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-jupyter-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-jupyter-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace jupyter [flags]")])]),e._v(" "),s("p",[e._v("Open a codespace in JupyterLab")]),e._v(" "),s("ul",[s("li",[e._v("-c, --codespace string   Name of the codespace")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace list [flags]")])]),e._v(" "),s("p",[e._v("List codespaces")]),e._v(" "),s("ul",[s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("-L, --limit int         Maximum number of codespaces to list (default 30)")]),e._v(" "),s("li",[e._v("-o, --org login         The login handle of the organization to list codespaces for (admin-only)")]),e._v(" "),s("li",[e._v("-r, --repo string       Repository name with owner: user/repo")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-u, --user username     The username to list codespaces for (used with --org)")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-logs-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-logs-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace logs [flags]")])]),e._v(" "),s("p",[e._v("Access codespace logs")]),e._v(" "),s("ul",[s("li",[e._v("-c, --codespace string   Name of the codespace")]),e._v(" "),s("li",[e._v("-f, --follow             Tail and follow the logs")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-ports-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-ports-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace ports [flags]")])]),e._v(" "),s("p",[e._v("List ports in a codespace")]),e._v(" "),s("ul",[s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')])]),e._v(" "),s("h4",{attrs:{id:"gh-codespace-ports-forward-remote-port-local-port"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-ports-forward-remote-port-local-port"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace ports forward <remote-port>:<local-port>...")])]),e._v(" "),s("p",[e._v("Forward ports")]),e._v(" "),s("h4",{attrs:{id:"gh-codespace-ports-visibility-port-public-private-org"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-ports-visibility-port-public-private-org"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace ports visibility <port>:{public|private|org}...")])]),e._v(" "),s("p",[e._v("Change the visibility of the forwarded port")]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-ssh-flags-ssh-flags-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-ssh-flags-ssh-flags-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace ssh [<flags>...] [-- <ssh-flags>...] [<command>]")])]),e._v(" "),s("p",[e._v("SSH into a codespace")]),e._v(" "),s("ul",[s("li",[e._v("-c, --codespace string    Name of the codespace")]),e._v(" "),s("li",[e._v("--config              Write OpenSSH configuration to stdout")]),e._v(" "),s("li",[e._v("-d, --debug               Log debug data to a file")]),e._v(" "),s("li",[e._v("--debug-file string   Path of the file log to")]),e._v(" "),s("li",[e._v("--profile string      Name of the SSH profile to use")]),e._v(" "),s("li",[e._v("--server-port int     SSH server port number (0 => pick unused)")])]),e._v(" "),s("h3",{attrs:{id:"gh-codespace-stop-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-codespace-stop-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh codespace stop [flags]")])]),e._v(" "),s("p",[e._v("Stop a running codespace")]),e._v(" "),s("ul",[s("li",[e._v("-c, --codespace string   Name of the codespace")]),e._v(" "),s("li",[e._v("-o, --org login          The login handle of the organization (admin-only)")]),e._v(" "),s("li",[e._v("-u, --user username      The username to stop codespace for (used with --org)")])]),e._v(" "),s("h2",{attrs:{id:"gh-completion-s-shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-completion-s-shell"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh completion -s <shell>")])]),e._v(" "),s("p",[e._v("Generate shell completion scripts")]),e._v(" "),s("ul",[s("li",[e._v("-s, --shell string   Shell type: {bash|zsh|fish|powershell}")])]),e._v(" "),s("h2",{attrs:{id:"gh-config-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-config-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh config <command>")])]),e._v(" "),s("p",[e._v("Manage configuration for gh")]),e._v(" "),s("h3",{attrs:{id:"gh-config-get-key-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-config-get-key-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh config get <key> [flags]")])]),e._v(" "),s("p",[e._v("Print the value of a given configuration key")]),e._v(" "),s("ul",[s("li",[e._v("-h, --host string   Get per-host setting")])]),e._v(" "),s("h3",{attrs:{id:"gh-config-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-config-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh config list [flags]")])]),e._v(" "),s("p",[e._v("Print a list of configuration keys and values")]),e._v(" "),s("ul",[s("li",[e._v("-h, --host string   Get per-host configuration")])]),e._v(" "),s("h3",{attrs:{id:"gh-config-set-key-value-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-config-set-key-value-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh config set <key> <value> [flags]")])]),e._v(" "),s("p",[e._v("Update configuration with a value for the given key")]),e._v(" "),s("ul",[s("li",[e._v("-h, --host string   Set per-host setting")])]),e._v(" "),s("h2",{attrs:{id:"gh-extension"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-extension"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh extension")])]),e._v(" "),s("p",[e._v("Manage gh extensions")]),e._v(" "),s("h3",{attrs:{id:"gh-extension-create-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-extension-create-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh extension create [<name>] [flags]")])]),e._v(" "),s("p",[e._v("Create a new extension")]),e._v(" "),s("ul",[s("li",[e._v("--precompiled string   Create a precompiled extension. Possible values: go, other")])]),e._v(" "),s("h3",{attrs:{id:"gh-extension-exec-name-args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-extension-exec-name-args"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh extension exec <name> [args]")])]),e._v(" "),s("p",[e._v("Execute an installed extension")]),e._v(" "),s("h3",{attrs:{id:"gh-extension-install-repository-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-extension-install-repository-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh extension install <repository> [flags]")])]),e._v(" "),s("p",[e._v("Install a gh extension from a repository")]),e._v(" "),s("ul",[s("li",[e._v("--pin string   pin extension to a release tag or commit ref")])]),e._v(" "),s("h3",{attrs:{id:"gh-extension-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-extension-list"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh extension list")])]),e._v(" "),s("p",[e._v("List installed extension commands")]),e._v(" "),s("h3",{attrs:{id:"gh-extension-remove-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-extension-remove-name"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh extension remove <name>")])]),e._v(" "),s("p",[e._v("Remove an installed extension")]),e._v(" "),s("h3",{attrs:{id:"gh-extension-upgrade-name-all-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-extension-upgrade-name-all-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh extension upgrade {<name> | --all} [flags]")])]),e._v(" "),s("p",[e._v("Upgrade installed extensions")]),e._v(" "),s("ul",[s("li",[e._v("--all       Upgrade all extensions")]),e._v(" "),s("li",[e._v("--dry-run   Only display upgrades")]),e._v(" "),s("li",[e._v("--force     Force upgrade extension")])]),e._v(" "),s("h2",{attrs:{id:"gh-gist-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gist-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gist <command>")])]),e._v(" "),s("p",[e._v("Manage gists")]),e._v(" "),s("h3",{attrs:{id:"gh-gist-clone-gist-directory-gitflags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gist-clone-gist-directory-gitflags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gist clone <gist> [<directory>] [-- <gitflags>...]")])]),e._v(" "),s("p",[e._v("Clone a gist locally")]),e._v(" "),s("h3",{attrs:{id:"gh-gist-create-filename-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gist-create-filename-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gist create [<filename>... | -] [flags]")])]),e._v(" "),s("p",[e._v("Create a new gist")]),e._v(" "),s("ul",[s("li",[e._v("-d, --desc string       A description for this gist")]),e._v(" "),s("li",[e._v("-f, --filename string   Provide a filename to be used when reading from standard input")]),e._v(" "),s("li",[e._v("-p, --public            List the gist publicly (default: secret)")]),e._v(" "),s("li",[e._v("-w, --web               Open the web browser with created gist")])]),e._v(" "),s("h3",{attrs:{id:"gh-gist-delete-id-url"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gist-delete-id-url"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gist delete {<id> | <url>}")])]),e._v(" "),s("p",[e._v("Delete a gist")]),e._v(" "),s("h3",{attrs:{id:"gh-gist-edit-id-url-filename-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gist-edit-id-url-filename-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gist edit {<id> | <url>} [<filename>] [flags]")])]),e._v(" "),s("p",[e._v("Edit one of your gists")]),e._v(" "),s("ul",[s("li",[e._v("-a, --add string        Add a new file to the gist")]),e._v(" "),s("li",[e._v("-d, --desc string       New description for the gist")]),e._v(" "),s("li",[e._v("-f, --filename string   Select a file to edit")])]),e._v(" "),s("h3",{attrs:{id:"gh-gist-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gist-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gist list [flags]")])]),e._v(" "),s("p",[e._v("List your gists")]),e._v(" "),s("ul",[s("li",[e._v("-L, --limit int   Maximum number of gists to fetch (default 10)")]),e._v(" "),s("li",[e._v("--public      Show only public gists")]),e._v(" "),s("li",[e._v("--secret      Show only secret gists")])]),e._v(" "),s("h3",{attrs:{id:"gh-gist-view-id-url-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gist-view-id-url-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gist view [<id> | <url>] [flags]")])]),e._v(" "),s("p",[e._v("View a gist")]),e._v(" "),s("ul",[s("li",[e._v("-f, --filename string   Display a single file from the gist")]),e._v(" "),s("li",[e._v("--files             List file names from the gist")]),e._v(" "),s("li",[e._v("-r, --raw               Print raw instead of rendered gist contents")]),e._v(" "),s("li",[e._v("-w, --web               Open gist in the browser")])]),e._v(" "),s("h2",{attrs:{id:"gh-gpg-key-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gpg-key-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gpg-key <command>")])]),e._v(" "),s("p",[e._v("Manage GPG keys")]),e._v(" "),s("h3",{attrs:{id:"gh-gpg-key-add-key-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gpg-key-add-key-file"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gpg-key add [<key-file>]")])]),e._v(" "),s("p",[e._v("Add a GPG key to your GitHub account")]),e._v(" "),s("h3",{attrs:{id:"gh-gpg-key-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-gpg-key-list"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh gpg-key list")])]),e._v(" "),s("p",[e._v("Lists GPG keys in your GitHub account")]),e._v(" "),s("h2",{attrs:{id:"gh-issue-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue <command>")])]),e._v(" "),s("p",[e._v("Manage issues")]),e._v(" "),s("h3",{attrs:{id:"gh-issue-close-number-url-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-close-number-url-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue close {<number> | <url>} [flags]")])]),e._v(" "),s("p",[e._v("Close issue")]),e._v(" "),s("ul",[s("li",[e._v("-c, --comment string   Leave a closing comment")]),e._v(" "),s("li",[e._v("-r, --reason string    Reason for closing: {completed|not planned}")])]),e._v(" "),s("h3",{attrs:{id:"gh-issue-comment-number-url-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-comment-number-url-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue comment {<number> | <url>} [flags]")])]),e._v(" "),s("p",[e._v("Add a comment to an issue")]),e._v(" "),s("ul",[s("li",[e._v("-b, --body text        The comment body text")]),e._v(" "),s("li",[e._v('-F, --body-file file   Read body text from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-e, --editor           Skip prompts and open the text editor to write the body in")]),e._v(" "),s("li",[e._v("-w, --web              Open the web browser to write the comment")])]),e._v(" "),s("h3",{attrs:{id:"gh-issue-create-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-create-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue create [flags]")])]),e._v(" "),s("p",[e._v("Create a new issue")]),e._v(" "),s("ul",[s("li",[e._v('-a, --assignee login   Assign people by their login. Use "@me" to self-assign.')]),e._v(" "),s("li",[e._v("-b, --body string      Supply a body. Will prompt for one otherwise.")]),e._v(" "),s("li",[e._v('-F, --body-file file   Read body text from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-l, --label name       Add labels by name")]),e._v(" "),s("li",[e._v("-m, --milestone name   Add the issue to a milestone by name")]),e._v(" "),s("li",[e._v("-p, --project name     Add the issue to projects by name")]),e._v(" "),s("li",[e._v("--recover string   Recover input from a failed run of create")]),e._v(" "),s("li",[e._v("-t, --title string     Supply a title. Will prompt for one otherwise.")]),e._v(" "),s("li",[e._v("-w, --web              Open the browser to create an issue")])]),e._v(" "),s("h3",{attrs:{id:"gh-issue-delete-number-url-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-delete-number-url-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue delete {<number> | <url>} [flags]")])]),e._v(" "),s("p",[e._v("Delete issue")]),e._v(" "),s("ul",[s("li",[e._v("--confirm   confirm deletion without prompting")])]),e._v(" "),s("h3",{attrs:{id:"gh-issue-edit-number-url-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-edit-number-url-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue edit {<number> | <url>} [flags]")])]),e._v(" "),s("p",[e._v("Edit an issue")]),e._v(" "),s("ul",[s("li",[e._v('--add-assignee login      Add assigned users by their login. Use "@me" to assign yourself.')]),e._v(" "),s("li",[e._v("--add-label name          Add labels by name")]),e._v(" "),s("li",[e._v("--add-project name        Add the issue to projects by name")]),e._v(" "),s("li",[e._v("-b, --body string             Set the new body.")]),e._v(" "),s("li",[e._v('-F, --body-file file          Read body text from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-m, --milestone name          Edit the milestone the issue belongs to by name")]),e._v(" "),s("li",[e._v('--remove-assignee login   Remove assigned users by their login. Use "@me" to unassign yourself.')]),e._v(" "),s("li",[e._v("--remove-label name       Remove labels by name")]),e._v(" "),s("li",[e._v("--remove-project name     Remove the issue from projects by name")]),e._v(" "),s("li",[e._v("-t, --title string            Set the new title.")])]),e._v(" "),s("h3",{attrs:{id:"gh-issue-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue list [flags]")])]),e._v(" "),s("p",[e._v("List issues in a repository")]),e._v(" "),s("ul",[s("li",[e._v("--app string         Filter by GitHub App author")]),e._v(" "),s("li",[e._v("-a, --assignee string    Filter by assignee")]),e._v(" "),s("li",[e._v("-A, --author string      Filter by author")]),e._v(" "),s("li",[e._v("-q, --jq expression      Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields        Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("-l, --label strings      Filter by label")]),e._v(" "),s("li",[e._v("-L, --limit int          Maximum number of issues to fetch (default 30)")]),e._v(" "),s("li",[e._v("--mention string     Filter by mention")]),e._v(" "),s("li",[e._v("-m, --milestone string   Filter by milestone number or title")]),e._v(" "),s("li",[e._v("-S, --search query       Search issues with query")]),e._v(" "),s("li",[e._v('-s, --state string       Filter by state: {open|closed|all} (default "open")')]),e._v(" "),s("li",[e._v('-t, --template string    Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-w, --web                List issues in the web browser")])]),e._v(" "),s("h3",{attrs:{id:"gh-issue-pin-number-url"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-pin-number-url"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue pin {<number> | <url>}")])]),e._v(" "),s("p",[e._v("Pin a issue")]),e._v(" "),s("h3",{attrs:{id:"gh-issue-reopen-number-url-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-reopen-number-url-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue reopen {<number> | <url>} [flags]")])]),e._v(" "),s("p",[e._v("Reopen issue")]),e._v(" "),s("ul",[s("li",[e._v("-c, --comment string   Add a reopening comment")])]),e._v(" "),s("h3",{attrs:{id:"gh-issue-status-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-status-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue status [flags]")])]),e._v(" "),s("p",[e._v("Show status of relevant issues")]),e._v(" "),s("ul",[s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')])]),e._v(" "),s("h3",{attrs:{id:"gh-issue-transfer-number-url-destination-repo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-transfer-number-url-destination-repo"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue transfer {<number> | <url>} <destination-repo>")])]),e._v(" "),s("p",[e._v("Transfer issue to another repository")]),e._v(" "),s("h3",{attrs:{id:"gh-issue-unpin-number-url"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-unpin-number-url"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue unpin {<number> | <url>}")])]),e._v(" "),s("p",[e._v("Unpin a issue")]),e._v(" "),s("h3",{attrs:{id:"gh-issue-view-number-url-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-issue-view-number-url-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh issue view {<number> | <url>} [flags]")])]),e._v(" "),s("p",[e._v("View an issue")]),e._v(" "),s("ul",[s("li",[e._v("-c, --comments          View issue comments")]),e._v(" "),s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-w, --web               Open an issue in the browser")])]),e._v(" "),s("h2",{attrs:{id:"gh-label-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-label-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh label <command>")])]),e._v(" "),s("p",[e._v("Manage labels")]),e._v(" "),s("h3",{attrs:{id:"gh-label-clone-source-repository-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-label-clone-source-repository-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh label clone <source-repository> [flags]")])]),e._v(" "),s("p",[e._v("Clones labels from one repository to another")]),e._v(" "),s("ul",[s("li",[e._v("-f, --force   Overwrite labels in the destination repository")])]),e._v(" "),s("h3",{attrs:{id:"gh-label-create-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-label-create-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh label create <name> [flags]")])]),e._v(" "),s("p",[e._v("Create a new label")]),e._v(" "),s("ul",[s("li",[e._v("-c, --color string         Color of the label")]),e._v(" "),s("li",[e._v("-d, --description string   Description of the label")]),e._v(" "),s("li",[e._v("-f, --force                Update the label color and description if label already exists")])]),e._v(" "),s("h3",{attrs:{id:"gh-label-delete-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-label-delete-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh label delete <name> [flags]")])]),e._v(" "),s("p",[e._v("Delete a label from a repository")]),e._v(" "),s("ul",[s("li",[e._v("--confirm   Confirm deletion without prompting")])]),e._v(" "),s("h3",{attrs:{id:"gh-label-edit-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-label-edit-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh label edit <name> [flags]")])]),e._v(" "),s("p",[e._v("Edit a label")]),e._v(" "),s("ul",[s("li",[e._v("-c, --color string         Color of the label")]),e._v(" "),s("li",[e._v("-d, --description string   Description of the label")]),e._v(" "),s("li",[e._v("-n, --name string          New name of the label")])]),e._v(" "),s("h3",{attrs:{id:"gh-label-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-label-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh label list [flags]")])]),e._v(" "),s("p",[e._v("List labels in a repository")]),e._v(" "),s("ul",[s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("-L, --limit int         Maximum number of labels to fetch (default 30)")]),e._v(" "),s("li",[e._v('--order string      Order of labels returned: {asc|desc} (default "asc")')]),e._v(" "),s("li",[e._v("-S, --search string     Search label names and descriptions")]),e._v(" "),s("li",[e._v('--sort string       Sort fetched labels: {created|name} (default "created")')]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-w, --web               List labels in the web browser")])]),e._v(" "),s("h2",{attrs:{id:"gh-pr-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr <command>")])]),e._v(" "),s("p",[e._v("Manage pull requests")]),e._v(" "),s("h3",{attrs:{id:"gh-pr-checkout-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-checkout-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr checkout {<number> | <url> | <branch>} [flags]")])]),e._v(" "),s("p",[e._v("Check out a pull request in git")]),e._v(" "),s("ul",[s("li",[e._v("-b, --branch string        Local branch name to use (default: the name of the head branch)")]),e._v(" "),s("li",[e._v("--detach               Checkout PR with a detached HEAD")]),e._v(" "),s("li",[e._v("-f, --force                Reset the existing local branch to the latest state of the pull request")]),e._v(" "),s("li",[e._v("--recurse-submodules   Update all submodules after checkout")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-checks-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-checks-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr checks [<number> | <url> | <branch>] [flags]")])]),e._v(" "),s("p",[e._v("Show CI status for a single pull request")]),e._v(" "),s("ul",[s("li",[e._v("-i, --interval --watch   Refresh interval in seconds when using --watch flag (default 10)")]),e._v(" "),s("li",[e._v("--required           Only show checks that are required")]),e._v(" "),s("li",[e._v("--watch              Watch checks until they finish")]),e._v(" "),s("li",[e._v("-w, --web                Open the web browser to show details about checks")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-close-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-close-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr close {<number> | <url> | <branch>} [flags]")])]),e._v(" "),s("p",[e._v("Close a pull request")]),e._v(" "),s("ul",[s("li",[e._v("-c, --comment string   Leave a closing comment")]),e._v(" "),s("li",[e._v("-d, --delete-branch    Delete the local and remote branch after close")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-comment-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-comment-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr comment [<number> | <url> | <branch>] [flags]")])]),e._v(" "),s("p",[e._v("Add a comment to a pull request")]),e._v(" "),s("ul",[s("li",[e._v("-b, --body text        The comment body text")]),e._v(" "),s("li",[e._v('-F, --body-file file   Read body text from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-e, --editor           Skip prompts and open the text editor to write the body in")]),e._v(" "),s("li",[e._v("-w, --web              Open the web browser to write the comment")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-create-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-create-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr create [flags]")])]),e._v(" "),s("p",[e._v("Create a pull request")]),e._v(" "),s("ul",[s("li",[e._v('-a, --assignee login       Assign people by their login. Use "@me" to self-assign.')]),e._v(" "),s("li",[e._v("-B, --base branch          The branch into which you want your code merged")]),e._v(" "),s("li",[e._v("-b, --body string          Body for the pull request")]),e._v(" "),s("li",[e._v('-F, --body-file file       Read body text from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-d, --draft                Mark pull request as a draft")]),e._v(" "),s("li",[e._v("-f, --fill                 Do not prompt for title/body and just use commit info")]),e._v(" "),s("li",[e._v("-H, --head branch          The branch that contains commits for your pull request (default: current branch)")]),e._v(" "),s("li",[e._v("-l, --label name           Add labels by name")]),e._v(" "),s("li",[e._v("-m, --milestone name       Add the pull request to a milestone by name")]),e._v(" "),s("li",[e._v("--no-maintainer-edit   Disable maintainer's ability to modify pull request")]),e._v(" "),s("li",[e._v("-p, --project name         Add the pull request to projects by name")]),e._v(" "),s("li",[e._v("--recover string       Recover input from a failed run of create")]),e._v(" "),s("li",[e._v("-r, --reviewer handle      Request reviews from people or teams by their handle")]),e._v(" "),s("li",[e._v("-t, --title string         Title for the pull request")]),e._v(" "),s("li",[e._v("-w, --web                  Open the web browser to create a pull request")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-diff-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-diff-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr diff [<number> | <url> | <branch>] [flags]")])]),e._v(" "),s("p",[e._v("View changes in a pull request")]),e._v(" "),s("ul",[s("li",[e._v('--color string   Use color in diff output: {always|never|auto} (default "auto")')]),e._v(" "),s("li",[e._v("--name-only      Display only names of changed files")]),e._v(" "),s("li",[e._v("--patch          Display diff in patch format")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-edit-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-edit-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr edit [<number> | <url> | <branch>] [flags]")])]),e._v(" "),s("p",[e._v("Edit a pull request")]),e._v(" "),s("ul",[s("li",[e._v('--add-assignee login      Add assigned users by their login. Use "@me" to assign yourself.')]),e._v(" "),s("li",[e._v("--add-label name          Add labels by name")]),e._v(" "),s("li",[e._v("--add-project name        Add the pull request to projects by name")]),e._v(" "),s("li",[e._v("--add-reviewer login      Add reviewers by their login.")]),e._v(" "),s("li",[e._v("-B, --base branch             Change the base branch for this pull request")]),e._v(" "),s("li",[e._v("-b, --body string             Set the new body.")]),e._v(" "),s("li",[e._v('-F, --body-file file          Read body text from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-m, --milestone name          Edit the milestone the pull request belongs to by name")]),e._v(" "),s("li",[e._v('--remove-assignee login   Remove assigned users by their login. Use "@me" to unassign yourself.')]),e._v(" "),s("li",[e._v("--remove-label name       Remove labels by name")]),e._v(" "),s("li",[e._v("--remove-project name     Remove the pull request from projects by name")]),e._v(" "),s("li",[e._v("--remove-reviewer login   Remove reviewers by their login.")]),e._v(" "),s("li",[e._v("-t, --title string            Set the new title.")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr list [flags]")])]),e._v(" "),s("p",[e._v("List pull requests in a repository")]),e._v(" "),s("ul",[s("li",[e._v("--app string        Filter by GitHub App author")]),e._v(" "),s("li",[e._v("-a, --assignee string   Filter by assignee")]),e._v(" "),s("li",[e._v("-A, --author string     Filter by author")]),e._v(" "),s("li",[e._v("-B, --base string       Filter by base branch")]),e._v(" "),s("li",[e._v("-d, --draft             Filter by draft state")]),e._v(" "),s("li",[e._v("-H, --head string       Filter by head branch")]),e._v(" "),s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("-l, --label strings     Filter by label")]),e._v(" "),s("li",[e._v("-L, --limit int         Maximum number of items to fetch (default 30)")]),e._v(" "),s("li",[e._v("-S, --search query      Search pull requests with query")]),e._v(" "),s("li",[e._v('-s, --state string      Filter by state: {open|closed|merged|all} (default "open")')]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-w, --web               List pull requests in the web browser")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-merge-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-merge-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr merge [<number> | <url> | <branch>] [flags]")])]),e._v(" "),s("p",[e._v("Merge a pull request")]),e._v(" "),s("ul",[s("li",[e._v("--admin                   Use administrator privileges to merge a pull request that does not meet requirements")]),e._v(" "),s("li",[e._v("-A, --author-email text       Email text for merge commit author")]),e._v(" "),s("li",[e._v("--auto                    Automatically merge only after necessary requirements are met")]),e._v(" "),s("li",[e._v("-b, --body text               Body text for the merge commit")]),e._v(" "),s("li",[e._v('-F, --body-file file          Read body text from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-d, --delete-branch           Delete the local and remote branch after merge")]),e._v(" "),s("li",[e._v("--disable-auto            Disable auto-merge for this pull request")]),e._v(" "),s("li",[e._v("--match-head-commit SHA   Commit SHA that the pull request head must match to allow merge")]),e._v(" "),s("li",[e._v("-m, --merge                   Merge the commits with the base branch")]),e._v(" "),s("li",[e._v("-r, --rebase                  Rebase the commits onto the base branch")]),e._v(" "),s("li",[e._v("-s, --squash                  Squash the commits into one commit and merge it into the base branch")]),e._v(" "),s("li",[e._v("-t, --subject text            Subject text for the merge commit")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-ready-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-ready-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr ready [<number> | <url> | <branch>] [flags]")])]),e._v(" "),s("p",[e._v("Mark a pull request as ready for review")]),e._v(" "),s("ul",[s("li",[e._v('--undo   Convert a pull request to "draft"')])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-reopen-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-reopen-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr reopen {<number> | <url> | <branch>} [flags]")])]),e._v(" "),s("p",[e._v("Reopen a pull request")]),e._v(" "),s("ul",[s("li",[e._v("-c, --comment string   Add a reopening comment")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-review-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-review-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr review [<number> | <url> | <branch>] [flags]")])]),e._v(" "),s("p",[e._v("Add a review to a pull request")]),e._v(" "),s("ul",[s("li",[e._v("-a, --approve           Approve pull request")]),e._v(" "),s("li",[e._v("-b, --body string       Specify the body of a review")]),e._v(" "),s("li",[e._v('-F, --body-file file    Read body text from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("-c, --comment           Comment on a pull request")]),e._v(" "),s("li",[e._v("-r, --request-changes   Request changes on a pull request")])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-status-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-status-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr status [flags]")])]),e._v(" "),s("p",[e._v("Show status of relevant pull requests")]),e._v(" "),s("ul",[s("li",[e._v("-c, --conflict-status   Display the merge conflict status of each pull request")]),e._v(" "),s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')])]),e._v(" "),s("h3",{attrs:{id:"gh-pr-view-number-url-branch-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-pr-view-number-url-branch-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh pr view [<number> | <url> | <branch>] [flags]")])]),e._v(" "),s("p",[e._v("View a pull request")]),e._v(" "),s("ul",[s("li",[e._v("-c, --comments          View pull request comments")]),e._v(" "),s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-w, --web               Open a pull request in the browser")])]),e._v(" "),s("h2",{attrs:{id:"gh-release-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release <command>")])]),e._v(" "),s("p",[e._v("Manage releases")]),e._v(" "),s("h3",{attrs:{id:"gh-release-create-tag-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-create-tag-files"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release create [<tag>] [<files>...]")])]),e._v(" "),s("p",[e._v("Create a new release")]),e._v(" "),s("ul",[s("li",[e._v("--discussion-category string   Start a discussion in the specified category")]),e._v(" "),s("li",[e._v("-d, --draft                        Save the release as a draft instead of publishing it")]),e._v(" "),s("li",[e._v("--generate-notes               Automatically generate title and notes for the release")]),e._v(" "),s("li",[e._v("-n, --notes string                 Release notes")]),e._v(" "),s("li",[e._v('-F, --notes-file file              Read release notes from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("--notes-start-tag string       Tag to use as the starting point for generating release notes")]),e._v(" "),s("li",[e._v("-p, --prerelease                   Mark the release as a prerelease")]),e._v(" "),s("li",[e._v("--target branch                Target branch or full commit SHA (default: main branch)")]),e._v(" "),s("li",[e._v("-t, --title string                 Release title")])]),e._v(" "),s("h3",{attrs:{id:"gh-release-delete-tag-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-delete-tag-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release delete <tag> [flags]")])]),e._v(" "),s("p",[e._v("Delete a release")]),e._v(" "),s("ul",[s("li",[e._v("-y, --yes   Skip the confirmation prompt")])]),e._v(" "),s("h3",{attrs:{id:"gh-release-delete-asset-tag-asset-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-delete-asset-tag-asset-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release delete-asset <tag> <asset-name> [flags]")])]),e._v(" "),s("p",[e._v("Delete an asset from a release")]),e._v(" "),s("ul",[s("li",[e._v("-y, --yes   Skip the confirmation prompt")])]),e._v(" "),s("h3",{attrs:{id:"gh-release-download-tag-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-download-tag-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release download [<tag>] [flags]")])]),e._v(" "),s("p",[e._v("Download release assets")]),e._v(" "),s("ul",[s("li",[e._v("-A, --archive format        Download the source code archive in the specified format (zip or tar.gz)")]),e._v(" "),s("li",[e._v("--clobber               Overwrite existing files of the same name")]),e._v(" "),s("li",[e._v('-D, --dir string            The directory to download files into (default ".")')]),e._v(" "),s("li",[e._v("-p, --pattern stringArray   Download only assets that match a glob pattern")]),e._v(" "),s("li",[e._v("--skip-existing         Skip downloading when files of the same name exist")])]),e._v(" "),s("h3",{attrs:{id:"gh-release-edit-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-edit-tag"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release edit <tag>")])]),e._v(" "),s("p",[e._v("Edit a release")]),e._v(" "),s("ul",[s("li",[e._v("--discussion-category string   Start a discussion in the specified category when publishing a draft")]),e._v(" "),s("li",[e._v("--draft                        Save the release as a draft instead of publishing it")]),e._v(" "),s("li",[e._v("-n, --notes string                 Release notes")]),e._v(" "),s("li",[e._v('-F, --notes-file file              Read release notes from file (use "-" to read from standard input)')]),e._v(" "),s("li",[e._v("--prerelease                   Mark the release as a prerelease")]),e._v(" "),s("li",[e._v("--tag string                   The name of the tag")]),e._v(" "),s("li",[e._v("--target branch                Target branch or full commit SHA (default: main branch)")]),e._v(" "),s("li",[e._v("-t, --title string                 Release title")])]),e._v(" "),s("h3",{attrs:{id:"gh-release-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release list [flags]")])]),e._v(" "),s("p",[e._v("List releases in a repository")]),e._v(" "),s("ul",[s("li",[e._v("--exclude-drafts   Exclude draft releases")]),e._v(" "),s("li",[e._v("-L, --limit int        Maximum number of items to fetch (default 30)")])]),e._v(" "),s("h3",{attrs:{id:"gh-release-upload-tag-files-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-upload-tag-files-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release upload <tag> <files>... [flags]")])]),e._v(" "),s("p",[e._v("Upload assets to a release")]),e._v(" "),s("ul",[s("li",[e._v("--clobber   Overwrite existing assets of the same name")])]),e._v(" "),s("h3",{attrs:{id:"gh-release-view-tag-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-release-view-tag-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh release view [<tag>] [flags]")])]),e._v(" "),s("p",[e._v("View information about a release")]),e._v(" "),s("ul",[s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-w, --web               Open the release in the browser")])]),e._v(" "),s("h2",{attrs:{id:"gh-repo-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo <command>")])]),e._v(" "),s("p",[e._v("Manage repositories")]),e._v(" "),s("h3",{attrs:{id:"gh-repo-archive-repository-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-archive-repository-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo archive [<repository>] [flags]")])]),e._v(" "),s("p",[e._v("Archive a repository")]),e._v(" "),s("ul",[s("li",[e._v("-y, --confirm   Skip the confirmation prompt")])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-clone-repository-directory-gitflags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-clone-repository-directory-gitflags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo clone <repository> [<directory>] [-- <gitflags>...]")])]),e._v(" "),s("p",[e._v("Clone a repository locally")]),e._v(" "),s("ul",[s("li",[e._v('-u, --upstream-remote-name string   Upstream remote name when cloning a fork (default "upstream")')])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-create-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-create-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo create [<name>] [flags]")])]),e._v(" "),s("p",[e._v("Create a new repository")]),e._v(" "),s("ul",[s("li",[e._v("--add-readme             Add a README file to the new repository")]),e._v(" "),s("li",[e._v("-c, --clone                  Clone the new repository to the current directory")]),e._v(" "),s("li",[e._v("-d, --description string     Description of the repository")]),e._v(" "),s("li",[e._v("--disable-issues         Disable issues in the new repository")]),e._v(" "),s("li",[e._v("--disable-wiki           Disable wiki in the new repository")]),e._v(" "),s("li",[e._v("-g, --gitignore string       Specify a gitignore template for the repository")]),e._v(" "),s("li",[e._v("-h, --homepage URL           Repository home page URL")]),e._v(" "),s("li",[e._v("--include-all-branches   Include all branches from template repository")]),e._v(" "),s("li",[e._v("--internal               Make the new repository internal")]),e._v(" "),s("li",[e._v("-l, --license string         Specify an Open Source License for the repository")]),e._v(" "),s("li",[e._v("--private                Make the new repository private")]),e._v(" "),s("li",[e._v("--public                 Make the new repository public")]),e._v(" "),s("li",[e._v("--push                   Push local commits to the new repository")]),e._v(" "),s("li",[e._v("-r, --remote string          Specify remote name for the new repository")]),e._v(" "),s("li",[e._v("-s, --source string          Specify path to local repository to use as source")]),e._v(" "),s("li",[e._v("-t, --team name              The name of the organization team to be granted access")]),e._v(" "),s("li",[e._v("-p, --template repository    Make the new repository based on a template repository")])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-delete-repository-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-delete-repository-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo delete [<repository>] [flags]")])]),e._v(" "),s("p",[e._v("Delete a repository")]),e._v(" "),s("ul",[s("li",[e._v("--confirm   confirm deletion without prompting")])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-deploy-key-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-deploy-key-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo deploy-key <command>")])]),e._v(" "),s("p",[e._v("Manage deploy keys in a repository")]),e._v(" "),s("h4",{attrs:{id:"gh-repo-deploy-key-add-key-file-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-deploy-key-add-key-file-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo deploy-key add <key-file> [flags]")])]),e._v(" "),s("p",[e._v("Add a deploy key to a GitHub repository")]),e._v(" "),s("ul",[s("li",[e._v("-w, --allow-write    Allow write access for the key")]),e._v(" "),s("li",[e._v("-t, --title string   Title of the new key")])]),e._v(" "),s("h4",{attrs:{id:"gh-repo-deploy-key-delete-key-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-deploy-key-delete-key-id"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo deploy-key delete <key-id>")])]),e._v(" "),s("p",[e._v("Delete a deploy key from a GitHub repository")]),e._v(" "),s("h4",{attrs:{id:"gh-repo-deploy-key-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-deploy-key-list"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo deploy-key list")])]),e._v(" "),s("p",[e._v("List deploy keys in a GitHub repository")]),e._v(" "),s("h3",{attrs:{id:"gh-repo-edit-repository-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-edit-repository-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo edit [<repository>] [flags]")])]),e._v(" "),s("p",[e._v("Edit repository settings")]),e._v(" "),s("ul",[s("li",[e._v("--add-topic strings        Add repository topic")]),e._v(" "),s("li",[e._v("--allow-forking            Allow forking of an organization repository")]),e._v(" "),s("li",[e._v("--default-branch name      Set the default branch name for the repository")]),e._v(" "),s("li",[e._v("--delete-branch-on-merge   Delete head branch when pull requests are merged")]),e._v(" "),s("li",[e._v("-d, --description string       Description of the repository")]),e._v(" "),s("li",[e._v("--enable-auto-merge        Enable auto-merge functionality")]),e._v(" "),s("li",[e._v("--enable-issues            Enable issues in the repository")]),e._v(" "),s("li",[e._v("--enable-merge-commit      Enable merging pull requests via merge commit")]),e._v(" "),s("li",[e._v("--enable-projects          Enable projects in the repository")]),e._v(" "),s("li",[e._v("--enable-rebase-merge      Enable merging pull requests via rebase")]),e._v(" "),s("li",[e._v("--enable-squash-merge      Enable merging pull requests via squashed commit")]),e._v(" "),s("li",[e._v("--enable-wiki              Enable wiki in the repository")]),e._v(" "),s("li",[e._v("-h, --homepage URL             Repository home page URL")]),e._v(" "),s("li",[e._v("--remove-topic strings     Remove repository topic")]),e._v(" "),s("li",[e._v("--template                 Make the repository available as a template repository")]),e._v(" "),s("li",[e._v("--visibility string        Change the visibility of the repository to {public,private,internal}")])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-fork-repository-gitflags-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-fork-repository-gitflags-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo fork [<repository>] [-- <gitflags>...] [flags]")])]),e._v(" "),s("p",[e._v("Create a fork of a repository")]),e._v(" "),s("ul",[s("li",[e._v("--clone                Clone the fork")]),e._v(" "),s("li",[e._v("--fork-name string     Rename the forked repository")]),e._v(" "),s("li",[e._v("--org string           Create the fork in an organization")]),e._v(" "),s("li",[e._v("--remote               Add a git remote for the fork")]),e._v(" "),s("li",[e._v('--remote-name string   Specify the name for the new remote (default "origin")')])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-list-owner-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-list-owner-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo list [<owner>] [flags]")])]),e._v(" "),s("p",[e._v("List repositories owned by user or organization")]),e._v(" "),s("ul",[s("li",[e._v("--archived            Show only archived repositories")]),e._v(" "),s("li",[e._v("--fork                Show only forks")]),e._v(" "),s("li",[e._v("-q, --jq expression       Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields         Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("-l, --language string     Filter by primary coding language")]),e._v(" "),s("li",[e._v("-L, --limit int           Maximum number of repositories to list (default 30)")]),e._v(" "),s("li",[e._v("--no-archived         Omit archived repositories")]),e._v(" "),s("li",[e._v("--source              Show only non-forks")]),e._v(" "),s("li",[e._v('-t, --template string     Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("--topic string        Filter by topic")]),e._v(" "),s("li",[e._v("--visibility string   Filter by repository visibility: {public|private|internal}")])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-rename-new-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-rename-new-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo rename [<new-name>] [flags]")])]),e._v(" "),s("p",[e._v("Rename a repository")]),e._v(" "),s("ul",[s("li",[e._v("-y, --confirm   skip confirmation prompt")])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-sync-destination-repository-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-sync-destination-repository-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo sync [<destination-repository>] [flags]")])]),e._v(" "),s("p",[e._v("Sync a repository")]),e._v(" "),s("ul",[s("li",[e._v("-b, --branch string   Branch to sync (default: main branch)")]),e._v(" "),s("li",[e._v("--force           Hard reset the branch of the destination repository to match the source repository")]),e._v(" "),s("li",[e._v("-s, --source string   Source repository")])]),e._v(" "),s("h3",{attrs:{id:"gh-repo-view-repository-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-repo-view-repository-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh repo view [<repository>] [flags]")])]),e._v(" "),s("p",[e._v("View a repository")]),e._v(" "),s("ul",[s("li",[e._v("-b, --branch string     View a specific branch of the repository")]),e._v(" "),s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-w, --web               Open a repository in the browser")])]),e._v(" "),s("h2",{attrs:{id:"gh-run-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-run-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh run <command>")])]),e._v(" "),s("p",[e._v("View details about workflow runs")]),e._v(" "),s("h3",{attrs:{id:"gh-run-cancel-run-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-run-cancel-run-id"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh run cancel [<run-id>]")])]),e._v(" "),s("p",[e._v("Cancel a workflow run")]),e._v(" "),s("h3",{attrs:{id:"gh-run-download-run-id-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-run-download-run-id-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh run download [<run-id>] [flags]")])]),e._v(" "),s("p",[e._v("Download artifacts generated by a workflow run")]),e._v(" "),s("ul",[s("li",[e._v('-D, --dir string            The directory to download artifacts into (default ".")')]),e._v(" "),s("li",[e._v("-n, --name stringArray      Download artifacts that match any of the given names")]),e._v(" "),s("li",[e._v("-p, --pattern stringArray   Download artifacts that match a glob pattern")])]),e._v(" "),s("h3",{attrs:{id:"gh-run-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-run-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh run list [flags]")])]),e._v(" "),s("p",[e._v("List recent workflow runs")]),e._v(" "),s("ul",[s("li",[e._v("-b, --branch string     Filter runs by branch")]),e._v(" "),s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("-L, --limit int         Maximum number of runs to fetch (default 20)")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-u, --user string       Filter runs by user who triggered the run")]),e._v(" "),s("li",[e._v("-w, --workflow string   Filter runs by workflow")])]),e._v(" "),s("h3",{attrs:{id:"gh-run-rerun-run-id-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-run-rerun-run-id-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh run rerun [<run-id>] [flags]")])]),e._v(" "),s("p",[e._v("Rerun a failed run")]),e._v(" "),s("ul",[s("li",[e._v("-d, --debug        Rerun with debug logging")]),e._v(" "),s("li",[e._v("--failed       Rerun only failed jobs, including dependencies")]),e._v(" "),s("li",[e._v("-j, --job string   Rerun a specific job from a run, including dependencies")])]),e._v(" "),s("h3",{attrs:{id:"gh-run-view-run-id-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-run-view-run-id-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh run view [<run-id>] [flags]")])]),e._v(" "),s("p",[e._v("View a summary of a workflow run")]),e._v(" "),s("ul",[s("li",[e._v("--exit-status       Exit with non-zero status if run failed")]),e._v(" "),s("li",[e._v("-j, --job string        View a specific job ID from a run")]),e._v(" "),s("li",[e._v("-q, --jq expression     Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields       Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("--log               View full log for either a run or specific job")]),e._v(" "),s("li",[e._v("--log-failed        View the log for any failed steps in a run or specific job")]),e._v(" "),s("li",[e._v('-t, --template string   Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("-v, --verbose           Show job steps")]),e._v(" "),s("li",[e._v("-w, --web               Open run in the browser")])]),e._v(" "),s("h3",{attrs:{id:"gh-run-watch-run-id-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-run-watch-run-id-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh run watch <run-id> [flags]")])]),e._v(" "),s("p",[e._v("Watch a run until it completes, showing its progress")]),e._v(" "),s("ul",[s("li",[e._v("--exit-status    Exit with non-zero status if run fails")]),e._v(" "),s("li",[e._v("-i, --interval int   Refresh interval in seconds (default 3)")])]),e._v(" "),s("h2",{attrs:{id:"gh-search-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-search-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh search <command>")])]),e._v(" "),s("p",[e._v("Search for repositories, issues, and pull requests")]),e._v(" "),s("h3",{attrs:{id:"gh-search-issues-query-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-search-issues-query-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh search issues [<query>] [flags]")])]),e._v(" "),s("p",[e._v("Search for issues")]),e._v(" "),s("ul",[s("li",[e._v("--app string             Filter by GitHub App author")]),e._v(" "),s("li",[e._v("--archived               Restrict search to archived repositories")]),e._v(" "),s("li",[e._v("--assignee string        Filter by assignee")]),e._v(" "),s("li",[e._v("--author string          Filter by author")]),e._v(" "),s("li",[e._v("--closed date            Filter on closed at date")]),e._v(" "),s("li",[e._v("--commenter user         Filter based on comments by user")]),e._v(" "),s("li",[e._v("--comments number        Filter on number of comments")]),e._v(" "),s("li",[e._v("--created date           Filter based on created at date")]),e._v(" "),s("li",[e._v("--include-prs            Include pull requests in results")]),e._v(" "),s("li",[e._v("--interactions number    Filter on number of reactions and comments")]),e._v(" "),s("li",[e._v("--involves user          Filter based on involvement of user")]),e._v(" "),s("li",[e._v("-q, --jq expression          Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields            Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("--label strings          Filter on label")]),e._v(" "),s("li",[e._v("--language string        Filter based on the coding language")]),e._v(" "),s("li",[e._v("-L, --limit int              Maximum number of results to fetch (default 30)")]),e._v(" "),s("li",[e._v("--locked                 Filter on locked conversation status")]),e._v(" "),s("li",[e._v("--match strings          Restrict search to specific field of issue: {title|body|comments}")]),e._v(" "),s("li",[e._v("--mentions user          Filter based on user mentions")]),e._v(" "),s("li",[e._v("--milestone title        Filter by milestone title")]),e._v(" "),s("li",[e._v("--no-assignee            Filter on missing assignee")]),e._v(" "),s("li",[e._v("--no-label               Filter on missing label")]),e._v(" "),s("li",[e._v("--no-milestone           Filter on missing milestone")]),e._v(" "),s("li",[e._v("--no-project             Filter on missing project")]),e._v(" "),s("li",[e._v("--order string           Order of results returned, ignored unless '--sort' flag is specified: {asc|desc} (default \"desc\")")]),e._v(" "),s("li",[e._v("--owner string           Filter on repository owner")]),e._v(" "),s("li",[e._v("--project number         Filter on project board number")]),e._v(" "),s("li",[e._v("--reactions number       Filter on number of reactions")]),e._v(" "),s("li",[e._v("--repo strings           Filter on repository")]),e._v(" "),s("li",[e._v('--sort string            Sort fetched results: {comments|created|interactions|reactions|reactions-+1|reactions--1|reactions-heart|reactions-smile|reactions-tada|reactions-thinking_face|updated} (default "best-match")')]),e._v(" "),s("li",[e._v("--state string           Filter based on state: {open|closed}")]),e._v(" "),s("li",[e._v("--team-mentions string   Filter based on team mentions")]),e._v(" "),s("li",[e._v('-t, --template string        Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("--updated date           Filter on last updated at date")]),e._v(" "),s("li",[e._v("--visibility strings     Filter based on repository visibility: {public|private|internal}")]),e._v(" "),s("li",[e._v("-w, --web                    Open the search query in the web browser")])]),e._v(" "),s("h3",{attrs:{id:"gh-search-prs-query-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-search-prs-query-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh search prs [<query>] [flags]")])]),e._v(" "),s("p",[e._v("Search for pull requests")]),e._v(" "),s("ul",[s("li",[e._v("--app string              Filter by GitHub App author")]),e._v(" "),s("li",[e._v("--archived                Restrict search to archived repositories")]),e._v(" "),s("li",[e._v("--assignee string         Filter by assignee")]),e._v(" "),s("li",[e._v("--author string           Filter by author")]),e._v(" "),s("li",[e._v("-B, --base string             Filter on base branch name")]),e._v(" "),s("li",[e._v("--checks string           Filter based on status of the checks: {pending|success|failure}")]),e._v(" "),s("li",[e._v("--closed date             Filter on closed at date")]),e._v(" "),s("li",[e._v("--commenter user          Filter based on comments by user")]),e._v(" "),s("li",[e._v("--comments number         Filter on number of comments")]),e._v(" "),s("li",[e._v("--created date            Filter based on created at date")]),e._v(" "),s("li",[e._v("--draft                   Filter based on draft state")]),e._v(" "),s("li",[e._v("-H, --head string             Filter on head branch name")]),e._v(" "),s("li",[e._v("--interactions number     Filter on number of reactions and comments")]),e._v(" "),s("li",[e._v("--involves user           Filter based on involvement of user")]),e._v(" "),s("li",[e._v("-q, --jq expression           Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields             Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("--label strings           Filter on label")]),e._v(" "),s("li",[e._v("--language string         Filter based on the coding language")]),e._v(" "),s("li",[e._v("-L, --limit int               Maximum number of results to fetch (default 30)")]),e._v(" "),s("li",[e._v("--locked                  Filter on locked conversation status")]),e._v(" "),s("li",[e._v("--match strings           Restrict search to specific field of issue: {title|body|comments}")]),e._v(" "),s("li",[e._v("--mentions user           Filter based on user mentions")]),e._v(" "),s("li",[e._v("--merged                  Filter based on merged state")]),e._v(" "),s("li",[e._v("--merged-at date          Filter on merged at date")]),e._v(" "),s("li",[e._v("--milestone title         Filter by milestone title")]),e._v(" "),s("li",[e._v("--no-assignee             Filter on missing assignee")]),e._v(" "),s("li",[e._v("--no-label                Filter on missing label")]),e._v(" "),s("li",[e._v("--no-milestone            Filter on missing milestone")]),e._v(" "),s("li",[e._v("--no-project              Filter on missing project")]),e._v(" "),s("li",[e._v("--order string            Order of results returned, ignored unless '--sort' flag is specified: {asc|desc} (default \"desc\")")]),e._v(" "),s("li",[e._v("--owner string            Filter on repository owner")]),e._v(" "),s("li",[e._v("--project number          Filter on project board number")]),e._v(" "),s("li",[e._v("--reactions number        Filter on number of reactions")]),e._v(" "),s("li",[e._v("--repo strings            Filter on repository")]),e._v(" "),s("li",[e._v("--review string           Filter based on review status: {none|required|approved|changes_requested}")]),e._v(" "),s("li",[e._v("--review-requested user   Filter on user or team requested to review")]),e._v(" "),s("li",[e._v("--reviewed-by user        Filter on user who reviewed")]),e._v(" "),s("li",[e._v('--sort string             Sort fetched results: {comments|reactions|reactions-+1|reactions--1|reactions-smile|reactions-thinking_face|reactions-heart|reactions-tada|interactions|created|updated} (default "best-match")')]),e._v(" "),s("li",[e._v("--state string            Filter based on state: {open|closed}")]),e._v(" "),s("li",[e._v("--team-mentions string    Filter based on team mentions")]),e._v(" "),s("li",[e._v('-t, --template string         Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("--updated date            Filter on last updated at date")]),e._v(" "),s("li",[e._v("--visibility strings      Filter based on repository visibility: {public|private|internal}")]),e._v(" "),s("li",[e._v("-w, --web                     Open the search query in the web browser")])]),e._v(" "),s("h3",{attrs:{id:"gh-search-repos-query-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-search-repos-query-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh search repos [<query>] [flags]")])]),e._v(" "),s("p",[e._v("Search for repositories")]),e._v(" "),s("ul",[s("li",[e._v("--archived                    Filter based on archive state")]),e._v(" "),s("li",[e._v("--created date                Filter based on created at date")]),e._v(" "),s("li",[e._v("--followers number            Filter based on number of followers")]),e._v(" "),s("li",[e._v("--forks number                Filter on number of forks")]),e._v(" "),s("li",[e._v("--good-first-issues number    Filter on number of issues with the 'good first issue' label")]),e._v(" "),s("li",[e._v("--help-wanted-issues number   Filter on number of issues with the 'help wanted' label")]),e._v(" "),s("li",[e._v("--include-forks string        Include forks in fetched repositories: {false|true|only}")]),e._v(" "),s("li",[e._v("-q, --jq expression               Filter JSON output using a jq expression")]),e._v(" "),s("li",[e._v("--json fields                 Output JSON with the specified fields")]),e._v(" "),s("li",[e._v("--language string             Filter based on the coding language")]),e._v(" "),s("li",[e._v("--license strings             Filter based on license type")]),e._v(" "),s("li",[e._v("-L, --limit int                   Maximum number of repositories to fetch (default 30)")]),e._v(" "),s("li",[e._v("--match strings               Restrict search to specific field of repository: {name|description|readme}")]),e._v(" "),s("li",[e._v("--number-topics number        Filter on number of topics")]),e._v(" "),s("li",[e._v("--order string                Order of repositories returned, ignored unless '--sort' flag is specified: {asc|desc} (default \"desc\")")]),e._v(" "),s("li",[e._v("--owner string                Filter on owner")]),e._v(" "),s("li",[e._v("--size string                 Filter on a size range, in kilobytes")]),e._v(" "),s("li",[e._v('--sort string                 Sort fetched repositories: {forks|help-wanted-issues|stars|updated} (default "best-match")')]),e._v(" "),s("li",[e._v("--stars number                Filter on number of stars")]),e._v(" "),s("li",[e._v('-t, --template string             Format JSON output using a Go template; see "gh help formatting"')]),e._v(" "),s("li",[e._v("--topic strings               Filter on topic")]),e._v(" "),s("li",[e._v("--updated date                Filter on last updated at date")]),e._v(" "),s("li",[e._v("--visibility strings          Filter based on visibility: {public|private|internal}")]),e._v(" "),s("li",[e._v("-w, --web                         Open the search query in the web browser")])]),e._v(" "),s("h2",{attrs:{id:"gh-secret-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-secret-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh secret <command>")])]),e._v(" "),s("p",[e._v("Manage GitHub secrets")]),e._v(" "),s("h3",{attrs:{id:"gh-secret-delete-secret-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-secret-delete-secret-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh secret delete <secret-name> [flags]")])]),e._v(" "),s("p",[e._v("Delete secrets")]),e._v(" "),s("ul",[s("li",[e._v("-a, --app string   Delete a secret for a specific application: {actions|codespaces|dependabot}")]),e._v(" "),s("li",[e._v("-e, --env string   Delete a secret for an environment")]),e._v(" "),s("li",[e._v("-o, --org string   Delete a secret for an organization")]),e._v(" "),s("li",[e._v("-u, --user         Delete a secret for your user")])]),e._v(" "),s("h3",{attrs:{id:"gh-secret-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-secret-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh secret list [flags]")])]),e._v(" "),s("p",[e._v("List secrets")]),e._v(" "),s("ul",[s("li",[e._v("-a, --app string   List secrets for a specific application: {actions|codespaces|dependabot}")]),e._v(" "),s("li",[e._v("-e, --env string   List secrets for an environment")]),e._v(" "),s("li",[e._v("-o, --org string   List secrets for an organization")]),e._v(" "),s("li",[e._v("-u, --user         List a secret for your user")])]),e._v(" "),s("h3",{attrs:{id:"gh-secret-set-secret-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-secret-set-secret-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh secret set <secret-name> [flags]")])]),e._v(" "),s("p",[e._v("Create or update secrets")]),e._v(" "),s("ul",[s("li",[e._v("-a, --app string           Set the application for a secret: {actions|codespaces|dependabot}")]),e._v(" "),s("li",[e._v("-b, --body string          The value for the secret (reads from standard input if not specified)")]),e._v(" "),s("li",[e._v("-e, --env environment      Set deployment environment secret")]),e._v(" "),s("li",[e._v("-f, --env-file file        Load secret names and values from a dotenv-formatted file")]),e._v(" "),s("li",[e._v("--no-store             Print the encrypted, base64-encoded value instead of storing it on Github")]),e._v(" "),s("li",[e._v("-o, --org organization     Set organization secret")]),e._v(" "),s("li",[e._v("-r, --repos repositories   List of repositories that can access an organization or user secret")]),e._v(" "),s("li",[e._v("-u, --user                 Set a secret for your user")]),e._v(" "),s("li",[e._v('-v, --visibility string    Set visibility for an organization secret: {all|private|selected} (default "private")')])]),e._v(" "),s("h2",{attrs:{id:"gh-ssh-key-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-ssh-key-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh ssh-key <command>")])]),e._v(" "),s("p",[e._v("Manage SSH keys")]),e._v(" "),s("h3",{attrs:{id:"gh-ssh-key-add-key-file-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-ssh-key-add-key-file-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh ssh-key add [<key-file>] [flags]")])]),e._v(" "),s("p",[e._v("Add an SSH key to your GitHub account")]),e._v(" "),s("ul",[s("li",[e._v("-t, --title string   Title for the new key")])]),e._v(" "),s("h3",{attrs:{id:"gh-ssh-key-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-ssh-key-list"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh ssh-key list")])]),e._v(" "),s("p",[e._v("Lists SSH keys in your GitHub account")]),e._v(" "),s("h2",{attrs:{id:"gh-status-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-status-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh status [flags]")])]),e._v(" "),s("p",[e._v("Print information about relevant issues, pull requests, and notifications across repositories")]),e._v(" "),s("ul",[s("li",[e._v("-e, --exclude strings   Comma separated list of repos to exclude in owner/name format")]),e._v(" "),s("li",[e._v("-o, --org string        Report status within an organization")])]),e._v(" "),s("h2",{attrs:{id:"gh-workflow-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-workflow-command"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh workflow <command>")])]),e._v(" "),s("p",[e._v("View details about GitHub Actions workflows")]),e._v(" "),s("h3",{attrs:{id:"gh-workflow-disable-workflow-id-workflow-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-workflow-disable-workflow-id-workflow-name"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh workflow disable [<workflow-id> | <workflow-name>]")])]),e._v(" "),s("p",[e._v("Disable a workflow")]),e._v(" "),s("h3",{attrs:{id:"gh-workflow-enable-workflow-id-workflow-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-workflow-enable-workflow-id-workflow-name"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh workflow enable [<workflow-id> | <workflow-name>]")])]),e._v(" "),s("p",[e._v("Enable a workflow")]),e._v(" "),s("h3",{attrs:{id:"gh-workflow-list-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-workflow-list-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh workflow list [flags]")])]),e._v(" "),s("p",[e._v("List workflows")]),e._v(" "),s("ul",[s("li",[e._v("-a, --all         Show all workflows, including disabled workflows")]),e._v(" "),s("li",[e._v("-L, --limit int   Maximum number of workflows to fetch (default 50)")])]),e._v(" "),s("h3",{attrs:{id:"gh-workflow-run-workflow-id-workflow-name-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-workflow-run-workflow-id-workflow-name-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh workflow run [<workflow-id> | <workflow-name>] [flags]")])]),e._v(" "),s("p",[e._v("Run a workflow by creating a workflow_dispatch event")]),e._v(" "),s("ul",[s("li",[e._v("-F, --field key=value       Add a string parameter in key=value format, respecting @ syntax")]),e._v(" "),s("li",[e._v("--json                  Read workflow inputs as JSON via STDIN")]),e._v(" "),s("li",[e._v("-f, --raw-field key=value   Add a string parameter in key=value format")]),e._v(" "),s("li",[e._v("-r, --ref string            The branch or tag name which contains the version of the workflow file you'd like to run")])]),e._v(" "),s("h3",{attrs:{id:"gh-workflow-view-workflow-id-workflow-name-filename-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gh-workflow-view-workflow-id-workflow-name-filename-flags"}},[e._v("#")]),e._v(" "),s("code",[e._v("gh workflow view [<workflow-id> | <workflow-name> | <filename>] [flags]")])]),e._v(" "),s("p",[e._v("View the summary of a workflow")]),e._v(" "),s("ul",[s("li",[e._v("-r, --ref string   The branch or tag name which contains the version of the workflow file you'd like to view")]),e._v(" "),s("li",[e._v("-w, --web          Open workflow in the browser")]),e._v(" "),s("li",[e._v("-y, --yaml         View the workflow yaml file")])])])}),[],!1,null,null,null);t.default=r.exports}}]);