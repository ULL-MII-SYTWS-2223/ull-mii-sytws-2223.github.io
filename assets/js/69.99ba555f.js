(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{703:function(t,s,a){"use strict";a.r(s);var e=a(9),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"parsing-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parsing-json"}},[t._v("#")]),t._v(" Parsing JSON")]),t._v(" "),a("h4",{attrs:{id:"question"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#question"}},[t._v("#")]),t._v(" Question")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/assets/old-exam-sample.pdf"}},[t._v("Old exam sample")]),t._v(": pdf file. Question: Parse the JSON Language")])]),t._v(" "),a("h4",{attrs:{id:"examples-of-solutions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-of-solutions"}},[t._v("#")]),t._v(" Examples of Solutions")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/ULL-ESIT-PL/learning-nearley/blob/main/examples/json.ne",target:"_blank",rel:"noopener noreferrer"}},[t._v("Solution: JSON parser in nearley.js"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[t._v("Task to do: Improve the solution by using your own lexical analyzer generator instead of the current moo lexer, removing the explicit use of white spaces (syntactic variable "),a("code",[t._v("_")]),t._v(" like in the production rule "),a("code",[t._v('pair -> key _ ":" _ value')]),t._v(") in the Nearley grammar")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gist.github.com/justjkk/436828/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Solution: JSON parser in yacc"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/pegjs/pegjs/blob/master/examples/json.pegjs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Solution: JSON parser in pegjs"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"translator-from-egg-ast-to-ast-term"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#translator-from-egg-ast-to-ast-term"}},[t._v("#")]),t._v(" Translator from Egg AST to AST Term")]),t._v(" "),a("h4",{attrs:{id:"question-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#question-2"}},[t._v("#")]),t._v(" Question")]),t._v(" "),a("p",[t._v("Example of a second part for the exam:")]),t._v(" "),a("p",[t._v("Assume the input JSON contains an Egg AST and translate it to AST Term notation.")]),t._v(" "),a("p",[t._v("Here is an example. Given the input program:")]),t._v(" "),a("div",{staticClass:"language-ruby line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("➜  evm2term git"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cat examples"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("property"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("egg \nx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sub"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"length"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Whose JSON looks like:")]),t._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("➜  evm2term git"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("(master) head -n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" examples/property.json \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apply"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"operator"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"property"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("The output of the "),a("code",[t._v("evm2term")]),t._v(" translator will be:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("➜  evm2term git"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" evm2term examples"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("property"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("op"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("op"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("args")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("args")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Possible Improvements if you decide it to present as TFA:")]),t._v(" "),a("ul",[a("li",[t._v("Add pretty printing of the term")]),t._v(" "),a("li",[t._v("Give support to JS Esprima ASTs")]),t._v(" "),a("li",[t._v("Make it generic so that any compiler AST can be added via some configuration")])]),t._v(" "),a("h4",{attrs:{id:"example-of-solution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-of-solution"}},[t._v("#")]),t._v(" Example of Solution")]),t._v(" "),a("ul",[a("li",[t._v("See package "),a("a",{attrs:{href:"https://www.npmjs.com/package/evm2term",target:"_blank",rel:"noopener noreferrer"}},[t._v("evm2term"),a("OutboundLink")],1),t._v(" and file "),a("a",{attrs:{href:"https://github.com/crguezl/evm2term/blob/master/index.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("crguezl/evm2term/index.js"),a("OutboundLink")],1),t._v(" for a solution using "),a("code",[t._v("estraverse")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);